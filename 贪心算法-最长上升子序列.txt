300. 最长上升子序列
给定一个无序的整数数组，找到其中最长上升子序列的长度。

示例:

输入: [10,9,2,5,3,7,101,18]
输出: 4 
解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。
说明:

可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。
你算法的时间复杂度应该为 O(n2) 。
进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?

class Solution {
public:
	int lengthOfLIS(vector<int>& nums) {
		if (nums.size() == 0)
		{
			return 0;
		}
		int iLength = nums.size();
		std::vector<int> oAsis;
		oAsis.push_back(nums[0]);
		for (int i = 1; i < iLength; i++)
		{
			if (nums[i] > oAsis.back())
			{
				oAsis.push_back(nums[i]);
			}
			else
			{
				int iPos = findPos(oAsis, nums[i]);
				oAsis[iPos] = nums[i];
			}
		}
		return oAsis.size();
	}
	int findPos(std::vector<int> oInt, int iNum)
	{
		int iLength = oInt.size();
		int iLeft = 0, iRight = iLength - 1, iPos = 0;
		while (iLeft <= iRight)
		{
			int iMid = (iRight + iLeft) >> 1;
			if (iNum > oInt[iMid])
			{
				iLeft = iMid + 1;
				iPos = iLeft;
			}
			else
			{
				iRight = iMid - 1;
			}
		}
		return iPos;
	}
};